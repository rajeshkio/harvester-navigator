name: Go CI

on:
  pull_request:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
  
  push:
    branches: [main]    # Only trigger from main branch
    tags:
      - 'v*.*'
      - 'v*.*.*'

jobs:
  go-code-ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: go get .

    - name: Check formatting
      run: |
        echo "Checking gofmt..."
        unformatted=$(gofmt -l .)
        if [ -n "$unformatted" ]; then
          echo "❌ The following files are not formatted:"
          echo "$unformatted"
          exit 1
        else
          echo "✅ gofmt passed"
        fi

    # Install and run golangci-lint
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v5
      with:
        version: latest 
        args: --out-format=colored-line-number --timeout=5m
   

    - name: Build Go code
      run: go build -v -o harvesterNavigator .

#   - name: Run Go tests
#     run: go test -v ./...

#    - name: Run Go program
#      run: |
#        echo "Running Go program..."
#        ./harvesterNavigator || echo "Run failed (optional)"

  go-release:
    name: Go Release
    runs-on: ubuntu-latest
    # This job only runs when a tag is pushed from main branch (strictly enforced)  
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
  # Grant write permissions for the job to create the release
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
#      with:
        # Use a Personal Access Token to trigger the push event correctly.
#        token: ${{ secrets.RELEASE_PAT }}

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Get the version from the tag
      # The github.ref_name variable contains the tag name (e.g., 'v1.1').
      # This step extracts the name without the 'v'.
      id: get_version
      run: echo "VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT
      
    - name: Build Go binaries for multiple platforms
      run: |
        echo "Building harvesterNavigator with version: ${{ steps.get_version.outputs.VERSION }}"
        
        # Create binaries directory
        mkdir -p binaries
        
        # Build for Linux (amd64)
        GOOS=linux GOARCH=amd64 go build -o binaries/harvesterNavigator-linux-amd64 \
          -ldflags "-s -w -X 'main.version=${{ steps.get_version.outputs.VERSION }}'" .
        
        # Build for Linux (arm64)  
        GOOS=linux GOARCH=arm64 go build -o binaries/harvesterNavigator-linux-arm64 \
          -ldflags "-s -w -X 'main.version=${{ steps.get_version.outputs.VERSION }}'" .
          
        # Build for macOS (amd64)
        GOOS=darwin GOARCH=amd64 go build -o binaries/harvesterNavigator-darwin-amd64 \
          -ldflags "-s -w -X 'main.version=${{ steps.get_version.outputs.VERSION }}'" .
          
        # Build for macOS (arm64 - Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -o binaries/harvesterNavigator-darwin-arm64 \
          -ldflags "-s -w -X 'main.version=${{ steps.get_version.outputs.VERSION }}'" .
          
        # Build for Windows (amd64)
        GOOS=windows GOARCH=amd64 go build -o binaries/harvesterNavigator-windows-amd64.exe \
          -ldflags "-s -w -X 'main.version=${{ steps.get_version.outputs.VERSION }}'" .
          
        # List what we built
        echo "Built binaries:"
        ls -la binaries/
        
        # Generate checksums for security
        cd binaries
        sha256sum * > checksums.txt
        echo "Checksums generated:"
        cat checksums.txt
        cd ..

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        # The tag name becomes the release tag.
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        # The `name` input is what will be displayed as the release title on GitHub.
        name: "Harvester Navigator ${{ steps.get_version.outputs.VERSION }}"
        # Add release notes
        body: |
          ## Harvester Navigator ${{ steps.get_version.outputs.VERSION }}
          
          ### Download Instructions
          Choose the binary for your platform:
          - **Linux (x64)**: `harvesterNavigator-linux-amd64`
          - **Linux (ARM64)**: `harvesterNavigator-linux-arm64`  
          - **macOS (Intel)**: `harvesterNavigator-darwin-amd64`
          - **macOS (Apple Silicon)**: `harvesterNavigator-darwin-arm64`
          - **Windows**: `harvesterNavigator-windows-amd64.exe`
          
          ### Usage
          ```bash
          # Make executable (Linux/macOS)
          chmod +x harvesterNavigator-*
          
          # Run with default port 8080
          ./harvesterNavigator-linux-amd64
          
          # Run with custom port
          ./harvesterNavigator-linux-amd64 -port 9090
          
          # Show version
          ./harvesterNavigator-linux-amd64 -version
          ```
          
          ### Verification
          Verify your download using the checksums in `checksums.txt`.
        # The name of the binaries to upload as release assets.
        files: binaries/*
        # The prerelease flag can be set to true if your version tag indicates a prerelease.
        prerelease: false
      env:
        # This token is automatically provided by GitHub Actions.
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

